# don't correct
unsetopt correct_all

# Case insensitive autocomplete
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Partial match highlighting
zstyle -e ':completion:*:default' list-colors \
  'reply=("${PREFIX:+=(#bi)($PREFIX:t)()*==34=34}:${(s.:.)LS_COLORS}")'

# Vim like history search
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

export PATH="/usr/local/bin:$PATH"

_git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null)
  if [ -n $ref ]; then
    branch_name="${ref#refs/heads/}"
    branch_name_max_length=$(($COLUMNS/5))
    if [ ${#branch_name} -gt $branch_name_max_length ]; then
      echo "$branch_name[0,$(($branch_name_max_length-3))]..."
    else
      echo $branch_name
    fi
  fi
}

_git_status() {
  git_status=$(cat "/tmp/git-status-$$")
  if [ -n "$(echo $git_status | grep "Changes not staged")" ]; then
    echo "changed"
  elif [ -n "$(echo $git_status | grep "Changes to be committed")" ]; then
    echo "pending"
  elif [ -n "$(echo $git_status | grep "Untracked files")" ]; then
    echo "untracked"
  else
    echo "unchanged"
  fi
}

_git_prompt_color() {
  if [ -n "$1" ]; then
    current_git_status=$(_git_status)
    if [ "changed" = $current_git_status ]; then
      echo "$(_red $1)"
    elif [ "pending" = $current_git_status ]; then
      echo "$(_yellow $1)"
    elif [ "unchanged" = $current_git_status ]; then
      echo "$(_green $1)"
    elif [ "untracked" = $current_git_status ]; then
      echo "$(_cyan $1)"
    fi
  else
    echo "$1"
  fi
}

_color() {
  if [ -n "$1" ]; then
    echo "%{$fg_bold[$2]%}$1%{$reset_color%}"
  fi
}

_separate()               { if [ -n "$1" ]; then echo " $1"; fi }
_grey()                   { echo "$(_color "$1" grey)" }
_yellow()                 { echo "$(_color "$1" yellow)" }
_green()                  { echo "$(_color "$1" green)" }
_red()                    { echo "$(_color "$1" red)" }
_cyan()                   { echo "$(_color "$1" cyan)" }
_blue()                   { echo "$(_color "$1" blue)" }

_full_path()              { echo "$(_blue "%~")" }
_working_directory()      { echo "$(_blue "%c")" }
_colored_git_branch()     { echo "$(_git_prompt_color "$(_git_prompt_info)")" }

_display_current_vim_mode() {
  if [[ $VIMODE == 'vicmd' ]]; then
    echo "$(_red "✘")"
  else
    echo "$(_green "✔")"
  fi
}

_display_docker_status() {
  if [[ -a "`pwd`/fig.yml" ]]; then
    echo "$(_cyan "⎋")"
  fi
}

function zle-line-init zle-keymap-select {
  VIMODE=$KEYMAP
  zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select

function precmd {
  $(git status 2> /dev/null >! "/tmp/git-status-$$")
}

PROMPT='$(_working_directory)$(_separate $(_colored_git_branch)) $(_display_current_vim_mode)$(_display_docker_status) '

if [[ -f $HOME/.fasd ]]; then
  # Initialize fasd (https://github.com/clvv/fasd)
  eval "$(fasd --init auto)"

  # aliases

  # jump to recently used items
  alias a='fasd -a' # any
  alias s='fasd -s' # show / search / select
  alias d='fasd -d' # directory
  alias f='fasd -f' # file
  alias j='fasd_cd -d' # cd, same functionality as j in autojump
  alias v='f -e vim' # quick opening files with vim
fi

# set gitconfig.local keys and define gpair() and gsolo()
gh_name=("${(s/ /)$(echo `git config user.name`)}")
gh_email=("${(s/@/)$(echo `git config user.email`)}")
gh_co_domain=$(echo `git config company.domain`)

# set the company email domain name in gitconfig.local, only do this once
if [[ $gh_co_domain == "" ]]; then
  echo "\nPlease enter your company email domain name: [thoughtbot.com] "
  read co_domain

  if [[ $co_domain == "" ]]; then
    new_domain="thoughtbot.com"
  else
    new_domain=$co_domain
  fi

  git config --file ~/.gitconfig.local --replace-all company.domain "$new_domain"
  gh_co_domain=$(echo `git config company.domain`)
fi

gpair() { git commit --amend --no-edit --author "$gh_name & $1 $2 <$gh_name[1]:l+$1:l@$gh_co_domain>" }
gsolo() { git commit --amend --no-edit --author "$gh_name <$gh_email[1]@$gh_email[2]>" }

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"
export DOCKER_HOST="tcp://localhost:4243"

export PATH="$PATH:/usr/local/lib/node_modules"
source /usr/local/share/chruby/chruby.sh
source /usr/local/share/chruby/auto.sh
chruby ruby-2.2.0
source ~/dotfiles-local/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
